import matplotlib.pyplot as plt
import numpy as np
import os
from cycler import cycler
from examples.parameters import fig_width, fig_height


def mlfa_interp_plot(filename, save=False) :
    """
    Utility to generate MLFA diagnostic plot based on
    input text file generated by MLFA driver code mlfa_interp_test.

    mlfa_interp_plot(filename)

    Outputs:
        (1) Error as a function of accuracy

    Inputs:
      filename: string, (base of) filename with output from mlfa_test_n routine
    """

    #
    # Read in data
    #

    # Default file extension is .txt if none supplied
    if not os.path.splitext(filename)[1] :
        file = open(filename + ".txt", "r")
    else :
        file = open(filename, "r")

    # Declare lists for data
    epss = [] # target accuracies
    accs = [] # algorithm accuracies
    errs = [] # errorss

    # # Default values for number of samples and file_version
    # file_version = 0.8

    # Recognise file version line from the fact that it starts with '*** MLFA file version'
    for line in file :
        if line[0 :23] == "*** MLFA_n file version" :
            file_version = float(line[24 :30])
        if line[0] == ' ' and ('0' <= line[1] <= '9'):
            splitline = [float(x) for x in line.split() if set(x) != {"-"}]
            epss.append(splitline[0])
            accs.append(splitline[1])
            errs.append(splitline[2])
    epss = np.array(epss)
    accs = np.array(accs)
    errs = np.array(errs)

    #
    # plot figures
    #

    plt.figure(figsize=(fig_width, fig_height))
    plt.rc('axes', prop_cycle=(cycler('color', ['k'])))
    plt.rc('font', size=12)

    #
    # Error as a function of accuracy
    #

    plt.loglog(epss, epss, '-', label=r'$\varepsilon$')
    plt.loglog(epss, accs, 'x', label=r'$\varepsilon_{\mathrm{alg}}$')
    plt.loglog(epss, errs, 'o', markerfacecolor='none', label = r'$\Vert f - f^{\mathrm{ML}} \Vert_\infty$')
    plt.xlabel(r'accuracy $\varepsilon$')
    plt.ylabel(r'error')
    plt.legend(loc='upper left')

    if save:
        plt.savefig(filename.replace('.txt', '.eps'), bbox_inches='tight')
    plt.show()